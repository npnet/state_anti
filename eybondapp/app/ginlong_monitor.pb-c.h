/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: ginlong_monitor.proto */

#ifndef PROTOBUF_C_ginlong_5fmonitor_2eproto__INCLUDED
#define PROTOBUF_C_ginlong_5fmonitor_2eproto__INCLUDED

#include "protobuf-c.h"
PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _GinlongMonitor__Packet GinlongMonitor__Packet;
typedef struct _GinlongMonitor__MCallNotification GinlongMonitor__MCallNotification;
typedef struct _GinlongMonitor__MNotification GinlongMonitor__MNotification;
typedef struct _GinlongMonitor__MCollector1 GinlongMonitor__MCollector1;
typedef struct _GinlongMonitor__MInverter1 GinlongMonitor__MInverter1;
typedef struct _GinlongMonitor__MElectricMeter1 GinlongMonitor__MElectricMeter1;
typedef struct _GinlongMonitor__MWeatherStation1 GinlongMonitor__MWeatherStation1;
typedef struct _GinlongMonitor__MCombiningBox1 GinlongMonitor__MCombiningBox1;
typedef struct _GinlongMonitor__MEPM1 GinlongMonitor__MEPM1;
typedef struct _GinlongMonitor__MSetParam GinlongMonitor__MSetParam;
typedef struct _GinlongMonitor__MSetCollector1 GinlongMonitor__MSetCollector1;
typedef struct _GinlongMonitor__MSetInverter1 GinlongMonitor__MSetInverter1;
typedef struct _GinlongMonitor__MSetParamAck GinlongMonitor__MSetParamAck;
typedef struct _GinlongMonitor__MTransmission GinlongMonitor__MTransmission;
typedef struct _GinlongMonitor__MTransmissionAck GinlongMonitor__MTransmissionAck;


/* --- enums --- */


/* --- messages --- */

struct  _GinlongMonitor__Packet
{
  ProtobufCMessage base;
  /*
   *时间戳，unix时间
   */
  uint32_t time;
  /*
   *流水号
   */
  uint32_t no;
  /*
   *采集器sn号，最大16个，0表示所有
   */
  uint64_t sn;
  /*
   *召唤数据
   */
  GinlongMonitor__MCallNotification *call_notification;
  /*
   *推送数据
   */
  GinlongMonitor__MNotification *notification;
  /*
   *设置数据
   */
  GinlongMonitor__MSetParam *set_param;
  /*
   *设置数据应答
   */
  GinlongMonitor__MSetParamAck *set_param_ack;
  /*
   *透传数据
   */
  GinlongMonitor__MTransmission *transmission;
  /*
   *透传数据应答
   */
  GinlongMonitor__MTransmissionAck *transmission_ack;
};
#define GINLONG_MONITOR__PACKET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ginlong_monitor__packet__descriptor) \
    , 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL }


struct  _GinlongMonitor__MCallNotification
{
  ProtobufCMessage base;
  /*
   * 0 所有的数据
   */
  uint32_t notification_type;
  /*
   * 1 采集器本身的数据   11 历史数据
   * 2 逆变器数据，格式1  12 历史数据
   * 3 电表数据，格式1    13 历史数据
   * 4 气象站数据，格式1   14 历史数据
   * 5 汇流箱数据，格式1   15 历史数据
   */
  /*
   *历史数据开始时间
   */
  uint32_t history_start;
  /*
   *历史数据结束时间		
   */
  uint32_t history_stop;
};
#define GINLONG_MONITOR__M_CALL_NOTIFICATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ginlong_monitor__m_call_notification__descriptor) \
    , 0, 0, 0 }


struct  _GinlongMonitor__MNotification
{
  ProtobufCMessage base;
  /*
   *采集器本身的数据
   */
  GinlongMonitor__MCollector1 *collector11;
  /*
   *逆变器数据，格式1
   */
  size_t n_inverter1;
  GinlongMonitor__MInverter1 **inverter1;
  /*
   *电表数据，格式1
   */
  size_t n_electricmeter1;
  GinlongMonitor__MElectricMeter1 **electricmeter1;
  /*
   *气象站数据，格式1
   */
  size_t n_weatherstation1;
  GinlongMonitor__MWeatherStation1 **weatherstation1;
  /*
   *汇流箱数据，格式1
   */
  size_t n_combiningbox1;
  GinlongMonitor__MCombiningBox1 **combiningbox1;
  /*
   *EPM数据，格式1
   */
  size_t n_epm1;
  GinlongMonitor__MEPM1 **epm1;
};
#define GINLONG_MONITOR__M__NOTIFICATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ginlong_monitor__m__notification__descriptor) \
    , NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL }


struct  _GinlongMonitor__MCollector1
{
  ProtobufCMessage base;
  /*
   *表示时历史数据还是实时数据,0-实时数据；1-采集器存历史数据;
   */
  uint32_t is_realtime;
  /*
   *采集器deviceName,SN，具体见sn号规则
   */
  uint64_t collector_sn;
  /*
   *累计工作时间,单位秒
   */
  uint64_t total_working_time;
  /*
   *本次上电工作时间,单位秒
   */
  uint64_t current_working_time;
  /*
   *数据上传周期,分钟
   */
  uint32_t data_upload_cycle;
  /*
   *心跳间隔,秒
   */
  uint32_t heartbeat_interval;
  /*
   *最大连接台数,采集能连接的最大台数
   */
  uint32_t maximum_number;
  /*
   *实际连接台数,采集器当前连接的台数
   */
  uint32_t actual_number;
  /*
   *采集器版本,软硬件大版本（1字节）+硬件小版本（1字节）+软件小版本（2字节）;软硬件大版本相同的可以升级
   */
  uint32_t collector_version;
  /*
   *出厂时间,UNIX时间
   */
  uint32_t factory_time;
  /*
   *当前信号强度级别,0-5级别
   */
  uint32_t rssi_level;
  /*
   *当前信号强度值RSSI,rssi值
   */
  int32_t rssi;
  /*
   *连接运营商,
   */
  char *connection_operator;
  /*
   *ICCID,20位数字
   */
  char *iccid;
  /*
   *定位LAC,位置区代码
   */
  uint32_t lac;
  /*
   *定位ci,小区代码
   */
  uint64_t ci;
  /*
   *位置经度,4字节经度
   */
  int32_t position_latitude;
  /*
   *位置纬度,4字节纬度
   */
  int32_t position_longitude;
  /*
   *连接的ssid,wifi连接的ssid
   */
  char *connected_ssid;
  /*
   *MAC地址,16进制
   */
  ProtobufCBinaryData mac;
  /*
   *局域网ip,16进制
   */
  uint32_t lan_ip;
  /*
   *逆变器地址,com口+RS485地址
   */
  size_t n_inverter_address;
  uint32_t *inverter_address;
  /*
   *气象站地址,com口+RS485地址
   */
  size_t n_weather_station_address;
  uint32_t *weather_station_address;
  /*
   *电表地址,com口+RS485地址
   */
  size_t n_electric_meter_address;
  uint32_t *electric_meter_address;
  /*
   *汇流箱地址,com口+RS485地址
   */
  size_t n_confluence_box_address;
  uint32_t *confluence_box_address;
  /*
   *采集器升级状态,0 没有升级;1 升级成功;100  版本相同不需要升级;101  升级服务器连接失败;102  下载失败
   */
  uint32_t datalogger_update;
  /*
   *逆变器升级状态,0 没有升级;1 升级成功;2 开始下载固件;3 下载固件成功;4  开始升级逆变器;200  model号不对应;201  升级服务器连接失败;202  下载失败;401  连接逆变器错误
   */
  uint32_t inverter_update;
  /*
   *升级逆变器从地址,com口+RS485地址
   */
  uint32_t inverter_update_addr;
};
#define GINLONG_MONITOR__M_COLLECTOR1__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ginlong_monitor__m_collector1__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, 0, 0, (char *)protobuf_c_empty_string, {0,NULL}, 0, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0, 0, 0 }


struct  _GinlongMonitor__MInverter1
{
  ProtobufCMessage base;
  /*
   *历史数据还是实时数据标志,0-实时数据；1-采集器存历史数据；2-设备存历史数据
   */
  uint32_t is_realtime;
  /*
   *数据时间,unix时间
   */
  uint32_t inverter_data_time;
  /*
   *逆变器地址,com口+RS484地址
   */
  uint32_t rs485_com_addr;
  /*
   * 产品型号,
   */
  uint32_t product_model;
  /*
   *逆变器SN,
   */
  ProtobufCBinaryData inverter_sn;
  /*
   * 逆变器软件版本,DSP软件版本（2字节）+液晶软件版本（2字节）
   */
  uint32_t inverter_software_version;
  /*
   *交流输出类型,0-单相;其他-三相
   */
  uint32_t ac_output_type;
  /*
   *直流输入类型,0 - 1路输入;1 - 2路输入;2 - 3路输入;3 - 4路输入
   */
  uint32_t dc_input_type;
  /*
   *逆变器类型和方式,1 - 并网;2 - 并网加电表用户侧;3 - 并网加电表电网侧;4 - 储能加电表用户侧;5 - 储能加电表电网侧 ;6 - 外置EPM
   */
  uint32_t inverter_meter_model;
  /*
   *有功功率,
   */
  int32_t pac;
  /*
   *当日发电量,
   */
  uint32_t e_today;
  /*
   *昨日发电量,
   */
  uint32_t e_yesterday;
  /*
   *当月发电量,
   */
  uint64_t e_month;
  /*
   *上月发电量,
   */
  uint64_t e_last_month;
  /*
   *今年发电量,
   */
  uint64_t e_year;
  /*
   *去年发电量,
   */
  uint64_t e_last_year;
  /*
   *总发电量,
   */
  uint64_t e_total;
  /*
   * 直流电压1,
   */
  uint32_t u_pv1;
  /*
   * 直流电流1,
   */
  int32_t i_pv1;
  /*
   *直流电压2,
   */
  uint32_t u_pv2;
  /*
   *直流电流2,
   */
  int32_t i_pv2;
  /*
   *直流电压3,
   */
  uint32_t u_pv3;
  /*
   *直流电流3,
   */
  int32_t i_pv3;
  /*
   *直流电压4,
   */
  uint32_t u_pv4;
  /*
   *直流电流4,
   */
  int32_t i_pv4;
  /*
   *A相交流电压,
   */
  uint32_t u_ac1;
  /*
   *A相交流电流,
   */
  int32_t i_ac1;
  /*
   *逆变器温度,
   */
  int32_t inverter_temperature;
  /*
   *当前状态,见附录二
   */
  uint32_t current_state;
  /*
   * 故障数据1,见附录五
   */
  uint32_t fault1;
  /*
   * 故障数据2,
   */
  uint32_t fault2;
  /*
   * 故障数据3,
   */
  uint32_t fault3;
  /*
   * 故障数据4,
   */
  uint32_t fault4;
  /*
   * 故障数据5,
   */
  uint32_t fault5;
  /*
   * 电网频率,
   */
  uint32_t fac;
  /*
   *执行的国家标准,见附表
   */
  uint32_t national_standards;
  /*
   *功率曲线版本,
   */
  uint32_t power_curve_version;
  /*
   *无功功率,
   */
  int32_t reactive_power;
  /*
   *视在功率,
   */
  int32_t apparent_power;
  /*
   *功率因数,
   */
  int32_t power_factor;
  /*
   * B相交流电压,
   */
  uint32_t u_ac2;
  /*
   * B相交流电流,
   */
  int32_t i_ac2;
  /*
   *C相交流电压,
   */
  uint32_t u_ac3;
  /*
   * C相交流电流,
   */
  int32_t i_ac3;
  /*
   *储能控制开关量,附录七
   */
  uint32_t energy_storage_control;
  /*
   *蓄电池电压,
   */
  uint32_t storage_battery_voltage;
  /*
   *蓄电池电流,带方向
   */
  int32_t storage_battery_current;
  /*
   *LLC母线电压,
   */
  uint32_t llc_bus_voltage;
  /*
   *旁路交流电压,
   */
  uint32_t bypass_ac_voltage;
  /*
   *旁路交流电流,
   */
  int32_t bypass_ac_current;
  /*
   *电池容量SOC,
   */
  uint32_t battery_capacity_soc;
  /*
   *电池健康SOH,
   */
  uint32_t battery_health_soh;
  /*
   *电池电压,
   */
  uint32_t battery_voltage;
  /*
   *电池电流,
   */
  int32_t bsttery_current;
  /*
   *电池充电限流,
   */
  uint32_t battery_charging_current;
  /*
   *电池放电限流,
   */
  uint32_t battery_discharge_limiting;
  /*
   *电池故障信息01,
   */
  uint32_t battery_failure_information_01;
  /*
   *电池故障信息02,
   */
  uint32_t battery_failure_information_02;
  /*
   *家庭负载功率,
   */
  uint32_t family_load_power;
  /*
   *旁路负载功率,
   */
  uint32_t bypass_load_power;
  /*
   *蓄电池功率,
   */
  int32_t battery_power;
  /*
   *电池总充电电量,
   */
  uint64_t battery_total_charge_energy;
  /*
   *当日电池充电电量,
   */
  uint32_t battery_today_charge_energy;
  /*
   *昨日电池充电电量,
   */
  uint32_t battery_yesterday_charge_energy;
  /*
   *电池总放电电量,
   */
  uint64_t battery_total_discharge_energy;
  /*
   *当日电池放电电量,
   */
  uint32_t battery_today_discharge_energy;
  /*
   *昨日电池放电电量,
   */
  uint32_t battery_yesterday_discharge_energy;
  /*
   *电网总取电电量,
   */
  uint64_t grid_purchased_total_energy;
  /*
   *当日电网取电电量,
   */
  uint32_t grid_purchased_today_energy;
  /*
   *昨日电网取电电量,
   */
  uint32_t grid_purchased_yesterday_energy;
  /*
   *电网总送电电量,
   */
  uint64_t grid_sell_total_energy;
  /*
   *当日电网送电电量,
   */
  uint32_t grid_sell_today_energy;
  /*
   *昨日电网送电电量,
   */
  uint32_t grid_sell_yesterday_energy;
  /*
   *家庭负载总用电电量,
   */
  uint64_t home_load_total_energy;
  /*
   *当日负载用电电量,
   */
  uint32_t home_load_today_energy;
  /*
   *昨日负载用电电量,
   */
  uint32_t home_load_yesterday_energy;
  /*
   *标准工作模式,
   */
  uint32_t standard_working_mode;
  /*
   *直流电压及电流PV5以后的,每组数据（路数(1)，数据(路数*4)）
   */
  ProtobufCBinaryData pv5_n_value;
  /*
   *iv曲线开始时间,iv曲线开始时间，为0表示无iv曲线
   */
  uint32_t iv_status_time;
  /*
   *iv曲线数量,0-无iv曲线；1-255 表示曲线数量；65535-失败；65534-进行中
   */
  uint32_t iv_run_status;
  /*
   *iv曲线数组值,每组数据（组号(1)，个数(1)，数据(个数*4)）如果个数为0，则表示数据全为0
   */
  ProtobufCBinaryData iv_array_value;
  /*
   *逆变器SN2,逆变器string格式的sn号
   */
  char *inverter_sn2;
  /*
   *初始化接地电压值,
   */
  uint32_t u_init_gnd;
  /*
   *直流母线电压,
   */
  uint32_t dc_bus;
  /*
   *直流母线半电压,
   */
  uint32_t dc_bus_half;
  /*
   *限功率实际值,
   */
  uint32_t p_limit_set;
  /*
   *功率因数实际调节值,
   */
  int32_t p_factor_limit_set;
  /*
   *限无功功率值,
   */
  int32_t p_reactive_limit_set;
  /*
   *当前运行电池型号,
   */
  uint32_t battery_type;
  /*
   *过放SOC,
   */
  uint32_t soc_discharge_set;
  /*
   *强充SOC,
   */
  uint32_t soc_charging_set;
  /*
   *EPM回流功率,
   */
  int32_t p_epm_set;
  /*
   *EPM FailSafe开关,Value=:0：FailSafe 关闭1：FailSafe 开启(485检测)2：FailSafe 开启(CT检测+485检测)
   */
  uint32_t epm_fail_safe;
  /*
   *EPM实时回流功率,
   */
  int32_t p_epm;
  /*
   *电网总有功功率,Psum
   */
  int32_t psum;
  /*
   *绝缘阻抗阀值,
   */
  uint32_t insulation_resistance;
};
#define GINLONG_MONITOR__M__INVERTER1__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ginlong_monitor__m__inverter1__descriptor) \
    , 0, 0, 0, 0, {0,NULL}, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, {0,NULL}, 0, 0, {0,NULL}, (char *)protobuf_c_empty_string, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _GinlongMonitor__MElectricMeter1
{
  ProtobufCMessage base;
  /*
   *历史数据还是实时数据标志,0-实时数据；1-采集器存历史数据；2-设备存历史数据
   */
  uint32_t is_realtime;
  /*
   *电表地址,com口+RS484地址
   */
  uint32_t rs485_com_addr;
  /*
   *数据时间,unix时间
   */
  uint32_t data_time;
  /*
   *电表协议,1:DLT645(97);2:DLT645(07);3:modbus;4:与逆变器相连
   */
  uint32_t electric_meter_protocol;
  /*
   *电表相数,0:单相;其他:三相
   */
  uint32_t electric_meter;
  /*
   *电表SN号,
   */
  ProtobufCBinaryData electric_meter_sn;
  /*
   *工作时间,
   */
  uint64_t working_hours;
  /*
   *A相电流,Ia
   */
  int32_t i_a;
  /*
   *A相相电压,Ua
   */
  uint32_t u_a;
  /*
   *总有功功率,Psum
   */
  int32_t psum;
  /*
   *总无功功率,Qsum
   */
  int32_t total_reactive_power;
  /*
   *总视在功率,Ssum
   */
  int32_t total_view_power;
  /*
   *平均功率因数,Pfav
   */
  int32_t average_power_factor;
  /*
   *交流频率,F
   */
  uint32_t f_ac;
  /*
   *正向有功电能(总),
   */
  uint64_t e_total_positive_active;
  /*
   *反向有功电能(总),
   */
  uint64_t e_total_reverse_active;
  /*
   *正向无功电能(总),
   */
  uint64_t e_total_positive_reactive;
  /*
   *反向无功电能(总),
   */
  uint64_t e_total_reverse_reactive;
  /*
   *正向有功电能(尖),
   */
  uint64_t e_tip_positive_active;
  /*
   *反向有功电能(尖),
   */
  uint64_t e_tip_reverse_active;
  /*
   *正向无功电能(尖),
   */
  uint64_t e_tip_positive_reactive;
  /*
   *反向无功电能(尖),
   */
  uint64_t e_tip_reverse_reactive;
  /*
   *正向有功电能(峰),
   */
  uint64_t e_peak_positive_active;
  /*
   *反向有功电能(峰),
   */
  uint64_t e_peak_reverse_active;
  /*
   *正向无功电能(峰),
   */
  uint64_t e_peak_positive_reactive;
  /*
   *反向无功电能(峰),
   */
  uint64_t e_peak_reverse_reactive;
  /*
   *正向有功电能(平),
   */
  uint64_t e_flat_positive_active;
  /*
   *反向有功电能(平),
   */
  uint64_t e_flat_reverse_active;
  /*
   *正向无功电能(平),
   */
  uint64_t e_flat_positive_reactive;
  /*
   *反向无功电能(平),
   */
  uint64_t e_flat_reverse_reactive;
  /*
   *正向有功电能(谷),
   */
  uint64_t e_valley_positive_active;
  /*
   *反向有功电能(谷),
   */
  uint64_t e_valley_reverse_active;
  /*
   *正向无功电能(谷),
   */
  uint64_t e_valley_positive_reactive;
  /*
   *反向无功电能(谷),
   */
  uint64_t e_valley_reverse_reactive;
  /*
   *B相电流,Ib
   */
  int32_t i_b;
  /*
   *C相电流,Ic
   */
  int32_t i_c;
  /*
   *平均电流,Iav
   */
  int32_t i_average;
  /*
   *B相相电压,Ub
   */
  uint32_t u_b;
  /*
   *C相相电压,Uc
   */
  uint32_t u_c;
  /*
   *平均相电压,
   */
  uint32_t u_average;
  /*
   *AB相线电压,Uab
   */
  uint32_t u_ab;
  /*
   *BC相线电压,Ubc
   */
  uint32_t u_bc;
  /*
   *CA相线电压,Uca
   */
  uint32_t u_ca;
  /*
   *平均线电压,
   */
  uint32_t u_average_line;
  /*
   *A相有功功率,Pa
   */
  int32_t p_a;
  /*
   *A相无功功率,Qa
   */
  int32_t a_reactive_power;
  /*
   *A相视在功率,Sa
   */
  int32_t a_looked_power;
  /*
   *A相功率因数,Pfa
   */
  int32_t a_phase_power_factor;
  /*
   *B相有功功率,Pb
   */
  int32_t p_b;
  /*
   *B相无功功率,Qb
   */
  int32_t b_reactive_power;
  /*
   *B相视在功率,Sb
   */
  int32_t b_looked_power;
  /*
   *B相功率因数,Pfb
   */
  int32_t b_phase_power_factor;
  /*
   *C相有功功率,Pc
   */
  int32_t p_c;
  /*
   *C相无功功率,Qc
   */
  int32_t c_reactive_power;
  /*
   *C相视在功率,Sc
   */
  int32_t c_looked_power;
  /*
   *C相功率因数,Pfc
   */
  int32_t c_phase_power_factor;
  /*
   *当日正向有功电能,
   */
  uint64_t e_today_positive_active;
  /*
   *当日反向有功电能,
   */
  uint64_t e_today_reverse_active;
  /*
   *电表SN号2,逆变器string格式的sn号
   */
  char *electric_meter_sn2;
};
#define GINLONG_MONITOR__M__ELECTRIC_METER1__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ginlong_monitor__m__electric_meter1__descriptor) \
    , 0, 0, 0, 0, 0, {0,NULL}, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (char *)protobuf_c_empty_string }


struct  _GinlongMonitor__MWeatherStation1
{
  ProtobufCMessage base;
  /*
   *历史数据还是实时数据标志,0-实时数据；1-采集器存历史数据；2-设备存历史数据
   */
  uint32_t is_realtime;
  /*
   *气象站地址,com口+RS484地址
   */
  uint32_t rs485_com_addr;
  /*
   *数据时间,unix时间
   */
  uint32_t data_time;
  /*
   *气象站型号,
   */
  uint32_t weather_model;
  /*
   *风速,
   */
  uint32_t wind_speed;
  /*
   *风向,
   */
  uint32_t wind_direction;
  /*
   *电池组件表面温度,
   */
  int32_t pv_temperature;
  /*
   *环境温度,
   */
  int32_t temperature;
  /*
   *相对湿度,
   */
  uint32_t humidity;
  /*
   *辐照强度,
   */
  uint32_t radiation_intensity;
  /*
   *日辐射量,
   */
  uint32_t diurnal_radiation;
  /*
   *总辐照量,
   */
  uint32_t total_radiation;
  /*
   *辐射日累计,
   */
  uint64_t cumulative_radiation;
};
#define GINLONG_MONITOR__M__WEATHER_STATION1__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ginlong_monitor__m__weather_station1__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _GinlongMonitor__MCombiningBox1
{
  ProtobufCMessage base;
  /*
   *历史数据还是实时数据标志,0-实时数据；1-采集器存历史数据；2-设备存历史数据
   */
  uint32_t is_realtime;
  /*
   *汇流箱地址,com口+RS484地址
   */
  uint32_t rs485_com_addr;
  /*
   *数据时间,unix时间
   */
  uint32_t data_time;
  /*
   *汇流箱sn号,
   */
  ProtobufCBinaryData confluence_box_sn;
  /*
   *设备类型,
   */
  uint32_t equipment_type;
  /*
   *运行时间,
   */
  uint64_t running_time;
  /*
   *版本号,
   */
  uint32_t version;
  /*
   *温度,
   */
  int32_t temperature;
  /*
   *电压1,
   */
  uint32_t u_pv1;
  /*
   *电流1,
   */
  int32_t i_pv1;
  /*
   *电压2,
   */
  uint32_t u_pv2;
  /*
   *电流2,
   */
  int32_t i_pv2;
  /*
   *电压3,
   */
  uint32_t u_pv3;
  /*
   *电流3,
   */
  int32_t i_pv3;
  /*
   *电压4,
   */
  uint32_t u_pv4;
  /*
   *电流4,
   */
  int32_t i_pv4;
  /*
   *电压5,
   */
  uint32_t u_pv5;
  /*
   *电流5,
   */
  int32_t i_pv5;
  /*
   *电压6,
   */
  uint32_t u_pv6;
  /*
   *电流6,
   */
  int32_t i_pv6;
  /*
   *电压7,
   */
  uint32_t u_pv7;
  /*
   *电流7,
   */
  int32_t i_pv7;
  /*
   *电压8,
   */
  uint32_t u_pv8;
  /*
   *电流8,
   */
  int32_t i_pv8;
  /*
   *电压9,
   */
  uint32_t u_pv9;
  /*
   *电流9,
   */
  int32_t i_pv9;
  /*
   *电压10,
   */
  uint32_t u_pv10;
  /*
   *电流10,
   */
  int32_t i_pv10;
  /*
   *电压11,
   */
  uint32_t u_pv11;
  /*
   *电流11,
   */
  int32_t i_pv11;
  /*
   *电压12,
   */
  uint32_t u_pv12;
  /*
   *电流12,
   */
  int32_t i_pv12;
  /*
   *电压13,
   */
  uint32_t u_pv13;
  /*
   *电流13,
   */
  int32_t i_pv13;
  /*
   *电压14,
   */
  uint32_t u_pv14;
  /*
   *电流14,
   */
  int32_t i_pv14;
  /*
   *电压15,
   */
  uint32_t u_pv15;
  /*
   *电流15,
   */
  int32_t i_pv15;
  /*
   *电压16,
   */
  uint32_t u_pv16;
  /*
   *电流16,
   */
  int32_t i_pv16;
  /*
   *汇入总电流,
   */
  int32_t i_total;
  /*
   *实时功率1,
   */
  int32_t p_pv1;
  /*
   *实时功率2,
   */
  int32_t p_pv2;
  /*
   *实时功率3,
   */
  int32_t p_pv3;
  /*
   *实时功率4,
   */
  int32_t p_pv4;
  /*
   *实时功率5,
   */
  int32_t p_pv5;
  /*
   *实时功率6,
   */
  int32_t p_pv6;
  /*
   *实时功率7,
   */
  int32_t p_pv7;
  /*
   *实时功率8,
   */
  int32_t p_pv8;
  /*
   *实时功率9,
   */
  int32_t p_pv9;
  /*
   *实时功率10,
   */
  int32_t p_pv10;
  /*
   *实时功率11,
   */
  int32_t p_pv11;
  /*
   *实时功率12,
   */
  int32_t p_pv12;
  /*
   *实时功率13,
   */
  int32_t p_pv13;
  /*
   *实时功率14,
   */
  int32_t p_pv14;
  /*
   *实时功率15,
   */
  int32_t p_pv15;
  /*
   *实时功率16,
   */
  int32_t p_pv16;
  /*
   *总功率,
   */
  int32_t p_total;
  /*
   *正向电能1,
   */
  uint64_t e_positive_1;
  /*
   *正向电能2,
   */
  uint64_t e_positive_2;
  /*
   *正向电能3,
   */
  uint64_t e_positive_3;
  /*
   *正向电能4,
   */
  uint64_t e_positive_4;
  /*
   *正向电能5,
   */
  uint64_t e_positive_5;
  /*
   *正向电能6,
   */
  uint64_t e_positive_6;
  /*
   *正向电能7,
   */
  uint64_t e_positive_7;
  /*
   *正向电能8,
   */
  uint64_t e_positive_8;
  /*
   *正向电能9,
   */
  uint64_t e_positive_9;
  /*
   *正向电能10,
   */
  uint64_t e_positive_10;
  /*
   *正向电能11,
   */
  uint64_t e_positive_11;
  /*
   *正向电能12,
   */
  uint64_t e_positive_12;
  /*
   *正向电能13,
   */
  uint64_t e_positive_13;
  /*
   *正向电能14,
   */
  uint64_t e_positive_14;
  /*
   *正向电能15,
   */
  uint64_t e_positive_15;
  /*
   *正向电能16,
   */
  uint64_t e_positive_16;
  /*
   *正向电能总,
   */
  uint64_t e_positive_total;
  /*
   *反向电能1,
   */
  uint64_t e_reverse_1;
  /*
   *反向电能2,
   */
  uint64_t e_reverse_2;
  /*
   *反向电能3,
   */
  uint64_t e_reverse_3;
  /*
   *反向电能4,
   */
  uint64_t e_reverse_4;
  /*
   *反向电能5,
   */
  uint64_t e_reverse_5;
  /*
   *反向电能6,
   */
  uint64_t e_reverse_6;
  /*
   *反向电能7,
   */
  uint64_t e_reverse_7;
  /*
   *反向电能8,
   */
  uint64_t e_reverse_8;
  /*
   *反向电能9,
   */
  uint64_t e_reverse_9;
  /*
   *反向电能10,
   */
  uint64_t e_reverse_10;
  /*
   *反向电能11,
   */
  uint64_t e_reverse_11;
  /*
   *反向电能12,
   */
  uint64_t e_reverse_12;
  /*
   *反向电能13,
   */
  uint64_t e_reverse_13;
  /*
   *反向电能14,
   */
  uint64_t e_reverse_14;
  /*
   *反向电能15,
   */
  uint64_t e_reverse_15;
  /*
   *反向电能16,
   */
  uint64_t e_reverse_16;
  /*
   *反向电能总,
   */
  uint64_t e_reverse_total;
};
#define GINLONG_MONITOR__M__COMBINING_BOX1__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ginlong_monitor__m__combining_box1__descriptor) \
    , 0, 0, 0, {0,NULL}, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _GinlongMonitor__MEPM1
{
  ProtobufCMessage base;
  /*
   *历史数据还是实时数据标志,0-实时数据；1-采集器存历史数据；2-设备存历史数据
   */
  uint32_t is_realtime;
  /*
   *EPM数据时间,unix时间
   */
  uint32_t epm_data_time;
  /*
   *逆变器地址,com口+RS484地址
   */
  uint32_t rs485_com_addr;
  /*
   *EPM的SN,
   */
  ProtobufCBinaryData epm_sn;
  /*
   *EPM软件版本,
   */
  uint32_t epm_software_version;
  /*
   *EPM交流电压A,
   */
  uint32_t u_ac1;
  /*
   *EPM交流电流A,
   */
  int32_t i_ac1;
  /*
   *EPM交流电压B,
   */
  uint32_t u_ac2;
  /*
   *EPM交流电流B,
   */
  int32_t i_ac2;
  /*
   *EPM交流电压C,
   */
  uint32_t u_ac3;
  /*
   *EPM交流电流C,
   */
  int32_t i_ac3;
  /*
   *EPM_A相功率,
   */
  int32_t p_ac1;
  /*
   *EPM_B相功率,
   */
  int32_t p_ac2;
  /*
   *EPM_C相功率,
   */
  int32_t p_ac3;
  /*
   *EPM_总功率,
   */
  int64_t p_epm_total;
  /*
   *逆变器总功率,
   */
  int64_t p_inverter_total;
  /*
   *逆变器MODEL号,
   */
  uint32_t inverter_model;
  /*
   *功率限制百分比,
   */
  uint32_t p_limit;
  /*
   *CT电流传感器变比比值,
   */
  uint32_t ct_ratio;
  /*
   *回流功率设置值,
   */
  uint32_t p_set;
  /*
   *逆变器设置台数,
   */
  uint32_t inverter_num;
  /*
   *FailSafe开关状态,0,关闭；1，开启
   */
  uint32_t fail_safe;
  /*
   *电网功率因数,
   */
  int32_t power_factor;
  /*
   *电网频率(Meter),
   */
  uint32_t fac_meter;
  /*
   *负载总功率,
   */
  uint32_t p_load;
  /*
   *逆变器总发电量,
   */
  uint32_t e_toaal_inverter;
  /*
   *负载总用电量,
   */
  uint32_t e_total_load;
  /*
   *电网取电总有功电能,
   */
  uint32_t e_total_buy;
  /*
   *电网送电总有功电能,
   */
  uint32_t e_total_sell;
};
#define GINLONG_MONITOR__M__EPM1__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ginlong_monitor__m__epm1__descriptor) \
    , 0, 0, 0, {0,NULL}, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _GinlongMonitor__MSetParam
{
  ProtobufCMessage base;
  /*
   *采集器本身的数据设置
   */
  GinlongMonitor__MSetCollector1 *set_collector1;
  /*
   *连接设备设置，格式1
   */
  GinlongMonitor__MSetInverter1 *set_inverter1;
};
#define GINLONG_MONITOR__M__SET__PARAM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ginlong_monitor__m__set__param__descriptor) \
    , NULL, NULL }


struct  _GinlongMonitor__MSetCollector1
{
  ProtobufCMessage base;
  /*
   *数据上传周期,分钟
   */
  uint32_t data_upload_cycle;
  /*
   *心跳间隔,秒
   */
  uint32_t heartbeat_interval;
  /*
   *最大连接台数,采集能连接的最大台数
   */
  uint32_t maximum_number;
  /*
   *出厂时间,UNIX时间
   */
  uint32_t factory_time;
  /*
   *采集器deviceName,SN，具体见sn号规则
   */
  uint64_t collector_sn;
  /*
   *product_Key,值
   */
  char *product_key;
  /*
   *device_Secret,值
   */
  char *device_secret;
  /*
   *逆变器地址,com口+RS485地址
   */
  size_t n_inverter_address;
  uint32_t *inverter_address;
  /*
   *气象站地址,com口+RS485地址
   */
  size_t n_weather_station_address;
  uint32_t *weather_station_address;
  /*
   *电表地址,com口+RS485地址
   */
  size_t n_electric_meter_address;
  uint32_t *electric_meter_address;
  /*
   *汇流箱地址,com口+RS485地址
   */
  size_t n_confluence_box_address;
  uint32_t *confluence_box_address;
  /*
   *连接的ssid,wifi连接的ssid
   */
  char *connected_ssid;
  /*
   *连接方式和key,wifi连接方式和key
   */
  char *connected_key;
  /*
   *MAC地址1,16进制
   */
  ProtobufCBinaryData mac1;
  /*
   *MAC地址2,16进制
   */
  ProtobufCBinaryData mac2;
  /*
   *MAC地址3,16进制
   */
  ProtobufCBinaryData mac3;
  /*
   *wifi连接方式,1-AP   2-STA 3-AT+STA
   */
  uint32_t wifi_mode;
};
#define GINLONG_MONITOR__M_SET_COLLECTOR1__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ginlong_monitor__m_set_collector1__descriptor) \
    , 0, 0, 0, 0, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL, 0,NULL, 0,NULL, 0,NULL, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, {0,NULL}, {0,NULL}, {0,NULL}, 0 }


struct  _GinlongMonitor__MSetInverter1
{
  ProtobufCMessage base;
  /*
   *逆变器地址,com口+RS484地址
   */
  uint32_t rs485_com_addr;
  /*
   *逆变器开关机,1-开机 2-关机
   */
  uint32_t onoff;
  /*
   *修改国家标准,
   */
  uint32_t change_national_standards;
  /*
   *修改功率曲线版本,
   */
  uint32_t change_power_version;
  /*
   *修改逆变器时间,UNIX时间
   */
  uint32_t inverter_data_time;
  /*
   *iv曲线开始时间,iv曲线开始检测的unix时间（秒）,>0-开始iv曲线检测
   */
  uint32_t iv_start;
};
#define GINLONG_MONITOR__M_SET__INVERTER1__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ginlong_monitor__m_set__inverter1__descriptor) \
    , 0, 0, 0, 0, 0, 0 }


struct  _GinlongMonitor__MSetParamAck
{
  ProtobufCMessage base;
  /*
   *0，成功；1，参数错误；2，通讯错误；3, 执行中
   */
  uint32_t result;
  /*
   *采集器本身的数据设置
   */
  GinlongMonitor__MSetCollector1 *set_collector1;
  /*
   *连接设备设置，格式1
   */
  GinlongMonitor__MSetInverter1 *set_inverter1;
};
#define GINLONG_MONITOR__M__SET__PARAM__ACK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ginlong_monitor__m__set__param__ack__descriptor) \
    , 0, NULL, NULL }


struct  _GinlongMonitor__MTransmission
{
  ProtobufCMessage base;
  /*
   *	rs485地址com+addr'
   */
  uint32_t rs485_com_addr;
  /*
   *重试次数
   */
  uint32_t retry;
  /*
   *发送的数据
   */
  ProtobufCBinaryData send;
};
#define GINLONG_MONITOR__M__TRANSMISSION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ginlong_monitor__m__transmission__descriptor) \
    , 0, 0, {0,NULL} }


struct  _GinlongMonitor__MTransmissionAck
{
  ProtobufCMessage base;
  /*
   *	rs485地址com+addr'
   */
  uint32_t rs485_com_addr;
  /*
   *0，成功；1，参数错误；2，通讯错误
   */
  uint32_t result;
  /*
   *发送的数据
   */
  ProtobufCBinaryData send;
  /*
   *接收的数据
   */
  ProtobufCBinaryData recv;
};
#define GINLONG_MONITOR__M__TRANSMISSION__ACK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ginlong_monitor__m__transmission__ack__descriptor) \
    , 0, 0, {0,NULL}, {0,NULL} }


/* GinlongMonitor__Packet methods */
void   ginlong_monitor__packet__init
                     (GinlongMonitor__Packet         *message);
size_t ginlong_monitor__packet__get_packed_size
                     (const GinlongMonitor__Packet   *message);
size_t ginlong_monitor__packet__pack
                     (const GinlongMonitor__Packet   *message,
                      uint8_t             *out);
size_t ginlong_monitor__packet__pack_to_buffer
                     (const GinlongMonitor__Packet   *message,
                      ProtobufCBuffer     *buffer);
GinlongMonitor__Packet *
       ginlong_monitor__packet__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ginlong_monitor__packet__free_unpacked
                     (GinlongMonitor__Packet *message,
                      ProtobufCAllocator *allocator);
/* GinlongMonitor__MCallNotification methods */
void   ginlong_monitor__m_call_notification__init
                     (GinlongMonitor__MCallNotification         *message);
size_t ginlong_monitor__m_call_notification__get_packed_size
                     (const GinlongMonitor__MCallNotification   *message);
size_t ginlong_monitor__m_call_notification__pack
                     (const GinlongMonitor__MCallNotification   *message,
                      uint8_t             *out);
size_t ginlong_monitor__m_call_notification__pack_to_buffer
                     (const GinlongMonitor__MCallNotification   *message,
                      ProtobufCBuffer     *buffer);
GinlongMonitor__MCallNotification *
       ginlong_monitor__m_call_notification__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ginlong_monitor__m_call_notification__free_unpacked
                     (GinlongMonitor__MCallNotification *message,
                      ProtobufCAllocator *allocator);
/* GinlongMonitor__MNotification methods */
void   ginlong_monitor__m__notification__init
                     (GinlongMonitor__MNotification         *message);
size_t ginlong_monitor__m__notification__get_packed_size
                     (const GinlongMonitor__MNotification   *message);
size_t ginlong_monitor__m__notification__pack
                     (const GinlongMonitor__MNotification   *message,
                      uint8_t             *out);
size_t ginlong_monitor__m__notification__pack_to_buffer
                     (const GinlongMonitor__MNotification   *message,
                      ProtobufCBuffer     *buffer);
GinlongMonitor__MNotification *
       ginlong_monitor__m__notification__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ginlong_monitor__m__notification__free_unpacked
                     (GinlongMonitor__MNotification *message,
                      ProtobufCAllocator *allocator);
/* GinlongMonitor__MCollector1 methods */
void   ginlong_monitor__m_collector1__init
                     (GinlongMonitor__MCollector1         *message);
size_t ginlong_monitor__m_collector1__get_packed_size
                     (const GinlongMonitor__MCollector1   *message);
size_t ginlong_monitor__m_collector1__pack
                     (const GinlongMonitor__MCollector1   *message,
                      uint8_t             *out);
size_t ginlong_monitor__m_collector1__pack_to_buffer
                     (const GinlongMonitor__MCollector1   *message,
                      ProtobufCBuffer     *buffer);
GinlongMonitor__MCollector1 *
       ginlong_monitor__m_collector1__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ginlong_monitor__m_collector1__free_unpacked
                     (GinlongMonitor__MCollector1 *message,
                      ProtobufCAllocator *allocator);
/* GinlongMonitor__MInverter1 methods */
void   ginlong_monitor__m__inverter1__init
                     (GinlongMonitor__MInverter1         *message);
size_t ginlong_monitor__m__inverter1__get_packed_size
                     (const GinlongMonitor__MInverter1   *message);
size_t ginlong_monitor__m__inverter1__pack
                     (const GinlongMonitor__MInverter1   *message,
                      uint8_t             *out);
size_t ginlong_monitor__m__inverter1__pack_to_buffer
                     (const GinlongMonitor__MInverter1   *message,
                      ProtobufCBuffer     *buffer);
GinlongMonitor__MInverter1 *
       ginlong_monitor__m__inverter1__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ginlong_monitor__m__inverter1__free_unpacked
                     (GinlongMonitor__MInverter1 *message,
                      ProtobufCAllocator *allocator);
/* GinlongMonitor__MElectricMeter1 methods */
void   ginlong_monitor__m__electric_meter1__init
                     (GinlongMonitor__MElectricMeter1         *message);
size_t ginlong_monitor__m__electric_meter1__get_packed_size
                     (const GinlongMonitor__MElectricMeter1   *message);
size_t ginlong_monitor__m__electric_meter1__pack
                     (const GinlongMonitor__MElectricMeter1   *message,
                      uint8_t             *out);
size_t ginlong_monitor__m__electric_meter1__pack_to_buffer
                     (const GinlongMonitor__MElectricMeter1   *message,
                      ProtobufCBuffer     *buffer);
GinlongMonitor__MElectricMeter1 *
       ginlong_monitor__m__electric_meter1__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ginlong_monitor__m__electric_meter1__free_unpacked
                     (GinlongMonitor__MElectricMeter1 *message,
                      ProtobufCAllocator *allocator);
/* GinlongMonitor__MWeatherStation1 methods */
void   ginlong_monitor__m__weather_station1__init
                     (GinlongMonitor__MWeatherStation1         *message);
size_t ginlong_monitor__m__weather_station1__get_packed_size
                     (const GinlongMonitor__MWeatherStation1   *message);
size_t ginlong_monitor__m__weather_station1__pack
                     (const GinlongMonitor__MWeatherStation1   *message,
                      uint8_t             *out);
size_t ginlong_monitor__m__weather_station1__pack_to_buffer
                     (const GinlongMonitor__MWeatherStation1   *message,
                      ProtobufCBuffer     *buffer);
GinlongMonitor__MWeatherStation1 *
       ginlong_monitor__m__weather_station1__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ginlong_monitor__m__weather_station1__free_unpacked
                     (GinlongMonitor__MWeatherStation1 *message,
                      ProtobufCAllocator *allocator);
/* GinlongMonitor__MCombiningBox1 methods */
void   ginlong_monitor__m__combining_box1__init
                     (GinlongMonitor__MCombiningBox1         *message);
size_t ginlong_monitor__m__combining_box1__get_packed_size
                     (const GinlongMonitor__MCombiningBox1   *message);
size_t ginlong_monitor__m__combining_box1__pack
                     (const GinlongMonitor__MCombiningBox1   *message,
                      uint8_t             *out);
size_t ginlong_monitor__m__combining_box1__pack_to_buffer
                     (const GinlongMonitor__MCombiningBox1   *message,
                      ProtobufCBuffer     *buffer);
GinlongMonitor__MCombiningBox1 *
       ginlong_monitor__m__combining_box1__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ginlong_monitor__m__combining_box1__free_unpacked
                     (GinlongMonitor__MCombiningBox1 *message,
                      ProtobufCAllocator *allocator);
/* GinlongMonitor__MEPM1 methods */
void   ginlong_monitor__m__epm1__init
                     (GinlongMonitor__MEPM1         *message);
size_t ginlong_monitor__m__epm1__get_packed_size
                     (const GinlongMonitor__MEPM1   *message);
size_t ginlong_monitor__m__epm1__pack
                     (const GinlongMonitor__MEPM1   *message,
                      uint8_t             *out);
size_t ginlong_monitor__m__epm1__pack_to_buffer
                     (const GinlongMonitor__MEPM1   *message,
                      ProtobufCBuffer     *buffer);
GinlongMonitor__MEPM1 *
       ginlong_monitor__m__epm1__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ginlong_monitor__m__epm1__free_unpacked
                     (GinlongMonitor__MEPM1 *message,
                      ProtobufCAllocator *allocator);
/* GinlongMonitor__MSetParam methods */
void   ginlong_monitor__m__set__param__init
                     (GinlongMonitor__MSetParam         *message);
size_t ginlong_monitor__m__set__param__get_packed_size
                     (const GinlongMonitor__MSetParam   *message);
size_t ginlong_monitor__m__set__param__pack
                     (const GinlongMonitor__MSetParam   *message,
                      uint8_t             *out);
size_t ginlong_monitor__m__set__param__pack_to_buffer
                     (const GinlongMonitor__MSetParam   *message,
                      ProtobufCBuffer     *buffer);
GinlongMonitor__MSetParam *
       ginlong_monitor__m__set__param__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ginlong_monitor__m__set__param__free_unpacked
                     (GinlongMonitor__MSetParam *message,
                      ProtobufCAllocator *allocator);
/* GinlongMonitor__MSetCollector1 methods */
void   ginlong_monitor__m_set_collector1__init
                     (GinlongMonitor__MSetCollector1         *message);
size_t ginlong_monitor__m_set_collector1__get_packed_size
                     (const GinlongMonitor__MSetCollector1   *message);
size_t ginlong_monitor__m_set_collector1__pack
                     (const GinlongMonitor__MSetCollector1   *message,
                      uint8_t             *out);
size_t ginlong_monitor__m_set_collector1__pack_to_buffer
                     (const GinlongMonitor__MSetCollector1   *message,
                      ProtobufCBuffer     *buffer);
GinlongMonitor__MSetCollector1 *
       ginlong_monitor__m_set_collector1__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ginlong_monitor__m_set_collector1__free_unpacked
                     (GinlongMonitor__MSetCollector1 *message,
                      ProtobufCAllocator *allocator);
/* GinlongMonitor__MSetInverter1 methods */
void   ginlong_monitor__m_set__inverter1__init
                     (GinlongMonitor__MSetInverter1         *message);
size_t ginlong_monitor__m_set__inverter1__get_packed_size
                     (const GinlongMonitor__MSetInverter1   *message);
size_t ginlong_monitor__m_set__inverter1__pack
                     (const GinlongMonitor__MSetInverter1   *message,
                      uint8_t             *out);
size_t ginlong_monitor__m_set__inverter1__pack_to_buffer
                     (const GinlongMonitor__MSetInverter1   *message,
                      ProtobufCBuffer     *buffer);
GinlongMonitor__MSetInverter1 *
       ginlong_monitor__m_set__inverter1__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ginlong_monitor__m_set__inverter1__free_unpacked
                     (GinlongMonitor__MSetInverter1 *message,
                      ProtobufCAllocator *allocator);
/* GinlongMonitor__MSetParamAck methods */
void   ginlong_monitor__m__set__param__ack__init
                     (GinlongMonitor__MSetParamAck         *message);
size_t ginlong_monitor__m__set__param__ack__get_packed_size
                     (const GinlongMonitor__MSetParamAck   *message);
size_t ginlong_monitor__m__set__param__ack__pack
                     (const GinlongMonitor__MSetParamAck   *message,
                      uint8_t             *out);
size_t ginlong_monitor__m__set__param__ack__pack_to_buffer
                     (const GinlongMonitor__MSetParamAck   *message,
                      ProtobufCBuffer     *buffer);
GinlongMonitor__MSetParamAck *
       ginlong_monitor__m__set__param__ack__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ginlong_monitor__m__set__param__ack__free_unpacked
                     (GinlongMonitor__MSetParamAck *message,
                      ProtobufCAllocator *allocator);
/* GinlongMonitor__MTransmission methods */
void   ginlong_monitor__m__transmission__init
                     (GinlongMonitor__MTransmission         *message);
size_t ginlong_monitor__m__transmission__get_packed_size
                     (const GinlongMonitor__MTransmission   *message);
size_t ginlong_monitor__m__transmission__pack
                     (const GinlongMonitor__MTransmission   *message,
                      uint8_t             *out);
size_t ginlong_monitor__m__transmission__pack_to_buffer
                     (const GinlongMonitor__MTransmission   *message,
                      ProtobufCBuffer     *buffer);
GinlongMonitor__MTransmission *
       ginlong_monitor__m__transmission__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ginlong_monitor__m__transmission__free_unpacked
                     (GinlongMonitor__MTransmission *message,
                      ProtobufCAllocator *allocator);
/* GinlongMonitor__MTransmissionAck methods */
void   ginlong_monitor__m__transmission__ack__init
                     (GinlongMonitor__MTransmissionAck         *message);
size_t ginlong_monitor__m__transmission__ack__get_packed_size
                     (const GinlongMonitor__MTransmissionAck   *message);
size_t ginlong_monitor__m__transmission__ack__pack
                     (const GinlongMonitor__MTransmissionAck   *message,
                      uint8_t             *out);
size_t ginlong_monitor__m__transmission__ack__pack_to_buffer
                     (const GinlongMonitor__MTransmissionAck   *message,
                      ProtobufCBuffer     *buffer);
GinlongMonitor__MTransmissionAck *
       ginlong_monitor__m__transmission__ack__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ginlong_monitor__m__transmission__ack__free_unpacked
                     (GinlongMonitor__MTransmissionAck *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*GinlongMonitor__Packet_Closure)
                 (const GinlongMonitor__Packet *message,
                  void *closure_data);
typedef void (*GinlongMonitor__MCallNotification_Closure)
                 (const GinlongMonitor__MCallNotification *message,
                  void *closure_data);
typedef void (*GinlongMonitor__MNotification_Closure)
                 (const GinlongMonitor__MNotification *message,
                  void *closure_data);
typedef void (*GinlongMonitor__MCollector1_Closure)
                 (const GinlongMonitor__MCollector1 *message,
                  void *closure_data);
typedef void (*GinlongMonitor__MInverter1_Closure)
                 (const GinlongMonitor__MInverter1 *message,
                  void *closure_data);
typedef void (*GinlongMonitor__MElectricMeter1_Closure)
                 (const GinlongMonitor__MElectricMeter1 *message,
                  void *closure_data);
typedef void (*GinlongMonitor__MWeatherStation1_Closure)
                 (const GinlongMonitor__MWeatherStation1 *message,
                  void *closure_data);
typedef void (*GinlongMonitor__MCombiningBox1_Closure)
                 (const GinlongMonitor__MCombiningBox1 *message,
                  void *closure_data);
typedef void (*GinlongMonitor__MEPM1_Closure)
                 (const GinlongMonitor__MEPM1 *message,
                  void *closure_data);
typedef void (*GinlongMonitor__MSetParam_Closure)
                 (const GinlongMonitor__MSetParam *message,
                  void *closure_data);
typedef void (*GinlongMonitor__MSetCollector1_Closure)
                 (const GinlongMonitor__MSetCollector1 *message,
                  void *closure_data);
typedef void (*GinlongMonitor__MSetInverter1_Closure)
                 (const GinlongMonitor__MSetInverter1 *message,
                  void *closure_data);
typedef void (*GinlongMonitor__MSetParamAck_Closure)
                 (const GinlongMonitor__MSetParamAck *message,
                  void *closure_data);
typedef void (*GinlongMonitor__MTransmission_Closure)
                 (const GinlongMonitor__MTransmission *message,
                  void *closure_data);
typedef void (*GinlongMonitor__MTransmissionAck_Closure)
                 (const GinlongMonitor__MTransmissionAck *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor ginlong_monitor__packet__descriptor;
extern const ProtobufCMessageDescriptor ginlong_monitor__m_call_notification__descriptor;
extern const ProtobufCMessageDescriptor ginlong_monitor__m__notification__descriptor;
extern const ProtobufCMessageDescriptor ginlong_monitor__m_collector1__descriptor;
extern const ProtobufCMessageDescriptor ginlong_monitor__m__inverter1__descriptor;
extern const ProtobufCMessageDescriptor ginlong_monitor__m__electric_meter1__descriptor;
extern const ProtobufCMessageDescriptor ginlong_monitor__m__weather_station1__descriptor;
extern const ProtobufCMessageDescriptor ginlong_monitor__m__combining_box1__descriptor;
extern const ProtobufCMessageDescriptor ginlong_monitor__m__epm1__descriptor;
extern const ProtobufCMessageDescriptor ginlong_monitor__m__set__param__descriptor;
extern const ProtobufCMessageDescriptor ginlong_monitor__m_set_collector1__descriptor;
extern const ProtobufCMessageDescriptor ginlong_monitor__m_set__inverter1__descriptor;
extern const ProtobufCMessageDescriptor ginlong_monitor__m__set__param__ack__descriptor;
extern const ProtobufCMessageDescriptor ginlong_monitor__m__transmission__descriptor;
extern const ProtobufCMessageDescriptor ginlong_monitor__m__transmission__ack__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_ginlong_5fmonitor_2eproto__INCLUDED */
